.. Automatically generated file - do not modify.

.. function:: renpy.copy_images(old, new)
    
    Copies images beginning with one prefix to images beginning with
    another. For example::
    
        renpy.copy_images("eileen", "eileen2")
    
    will create an image beginning with "eileen2" for every image beginning
    with "eileen". If "eileen happy" exists, "eileen2 happy" will be
    created.
    
    `old`
        A space-separated string giving the components of the old image
        name.
    
    `new`
        A space-separated string giving the components of the new image
        name.

.. function:: renpy.get_placement(d)
    
    This gets the placement of displayable d. There's very little warranty on this
    information, as it might change when the displayable is rendered, and might not
    exist until the displayable is first rendered.
    
    This returns an object with the following fields, each corresponding to a style
    property:
    
        * xpos
        * xanchor
        * xoffset
        * ypos
        * yanchor
        * yoffset
        * subpixel

.. function:: renpy.seen_image(name)
    
    Returns True if the named image has been seen at least once on the user's
    system. An image has been seen if it's been displayed using the show statement,
    scene statement, or :func:`renpy.show` function. (Note that there are cases
    where the user won't actually see the image, like a show immediately followed by
    a hide.)

.. function:: renpy.showing(name, layer='master')
    
    Returns true if an image with the same tag as `name` is showing on
    `layer`
    
    `image`
        May be a string giving the image name or a tuple giving each
        component of the image name. It may also be a string giving
        only the image tag.

